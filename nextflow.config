/*
 * -------------------------------------------------
 *  nf-core/viralrecon Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  // Options: Generic
  input = './samplesheet.csv'
  protocol = 'metagenomic'
  amplicon_fasta = false
  amplicon_bed =false

  // Options: SRA download
  ignore_sra_errors = false
  save_sra_fastq = false
  skip_sra = false

  // Options: Reference genomes
  genome = false
  save_reference = false

  // Options: Kraken2
  kraken2_db = 'https://zenodo.org/record/3738199/files/kraken2_human.tar.gz'
  kraken2_db_name = 'human'
  kraken2_use_ftp = false
  save_kraken2_fastq = false

  // Options: Read Trimming
  skip_adapter_trimming = false
  skip_amplicon_trimming = false
  save_trimmed = false

  // Options: Variant calling
  callers = 'varscan2,ivar'
  ivar_exclude_reads = false
  save_align_intermeds = false
  save_pileup = false
  skip_snpeff = false
  skip_variants_quast = false
  skip_variants = false

  // Options: De novo assembly
  assemblers = 'spades,metaspades,unicycler,minia'
  minia_kmer = 31
  skip_vg = false
  skip_blast = false
  skip_abacas = false
  skip_plasmidid = false
  skip_assembly_quast = false
  skip_assembly = false

  // Options: QC
  skip_fastqc = false
  skip_picard_metrics = false
  skip_multiqc = false
  skip_qc = false

  // Boilerplate options
  outdir = './results'
  publish_dir_mode = 'copy'
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/viralrecon:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/viralrecon custom config
try {
  includeConfig "${params.custom_config_base}/pipeline/viralrecon.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config/viralrecon profiles: ${params.custom_config_base}/pipeline/viralrecon.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test            { includeConfig 'conf/test.config' }
  test_sra        { includeConfig 'conf/test_sra.config' }
  test_full       { includeConfig 'conf/test_full.config' }
  test_sispa      { includeConfig 'conf/test_sispa.config' }
  test_full_sispa { includeConfig 'conf/test_full_sispa.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/viralrecon'
  author = 'Sarai Varona and Sara Monzon'
  homePage = 'https://github.com/nf-core/viralrecon'
  description = 'Assembly and intrahost/low-frequency variant calling for viral samples'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
