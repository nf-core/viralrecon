/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/viralrecon Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    platform                   = null
    protocol                   = null

    // Reference genome options
    genome                     = null
    primer_set                 = null
    primer_set_version         = null
    primer_fasta               = null
    primer_left_suffix         = '_LEFT'
    primer_right_suffix        = '_RIGHT'
    save_reference             = false

    // Nanopore options
    fastq_dir                  = null
    fast5_dir                  = null
    sequencing_summary         = null
    min_barcode_reads          = 100
    min_guppyplex_reads        = 10
    artic_minion_caller        = 'nanopolish'
    artic_minion_aligner       = 'minimap2'
    artic_minion_medaka_model  = null
    skip_pycoqc                = false
    skip_nanoplot              = false

    // Nanopore/Illumina options
    asciigenome_read_depth     = 50
    asciigenome_window_size    = 50
    multiqc_title              = null
    multiqc_config             = null
    max_multiqc_email_size     = '25.MB'
    skip_freyja                = false
    freyja_repeats             = 100
    freyja_db_name             = 'freyja_db'
    freyja_barcodes            = null
    freyja_lineages            = null
    skip_mosdepth              = false
    skip_pangolin              = false
    skip_nextclade             = false
    skip_variants_quast        = false
    skip_snpeff                = false
    skip_asciigenome           = false
    skip_variants_long_table   = false
    skip_multiqc               = false

    // Illumina QC, read trimming and filtering options
    kraken2_db                 = 's3://ngi-igenomes/test-data/viralrecon/kraken2_human.tar.gz'
    kraken2_db_name            = 'human'
    kraken2_variants_host_filter = false
    kraken2_assembly_host_filter = true
    save_trimmed_fail          = false
    skip_fastqc                = false
    skip_kraken2               = false
    skip_fastp                 = false
    skip_cutadapt              = false

    // Illumina variant calling options
    variant_caller             = null
    consensus_caller           = 'bcftools'
    min_mapped_reads           = 1000
    ivar_trim_noprimer         = false
    ivar_trim_offset           = null
    filter_duplicates          = false
    save_unaligned             = false
    save_mpileup               = false
    skip_ivar_trim             = false
    skip_markduplicates        = true
    skip_picard_metrics        = false
    skip_consensus_plots       = false
    skip_consensus             = false
    skip_variants              = false

    // Illumina de novo assembly options
    assemblers                 = 'spades'
    spades_mode                = 'rnaviral'
    spades_hmm                 = null
    blast_db                   = null
    skip_bandage               = false
    skip_blast                 = false
    skip_abacas                = false
    skip_plasmidid             = true
    skip_assembly_quast        = false
    skip_assembly              = false

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/viralrecon custom config.
// The default 'genomes.config' used by the pipeline can be found here and is auto-loaded via the pipeline config:
// https://github.com/nf-core/configs/blob/master/conf/pipeline/viralrecon/genomes.config
try {
    includeConfig "${params.custom_config_base}/pipeline/viralrecon.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/viralrecon profiles: ${params.custom_config_base}/pipeline/viralrecon.config")
}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        // Increase time available to build Conda environment
        conda.createTimeout    = "120 min"
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        conda.createTimeout    = "120 min"
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test               { includeConfig 'conf/test.config'               }
    test_sispa         { includeConfig 'conf/test_sispa.config'         }
    test_nanopore      { includeConfig 'conf/test_nanopore.config'      }
    test_full          { includeConfig 'conf/test_full.config'          }
    test_full_illumina { includeConfig 'conf/test_full.config'          }
    test_full_nanopore { includeConfig 'conf/test_full_nanopore.config' }
    test_full_sispa    { includeConfig 'conf/test_full_sispa.config'    }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
// apptainer.registry   = 'quay.io'
// docker.registry      = 'quay.io'
// podman.registry      = 'quay.io'
// singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/viralrecon'
    author          = """Patel H, Varona S and Monzon S"""
    homePage        = 'https://github.com/nf-core/viralrecon'
    description     = """Assembly and intrahost/low-frequency variant calling for viral samples"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '2.7.0dev'
    doi             = 'https://doi.org/10.5281/zenodo.3901628'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
